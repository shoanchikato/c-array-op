name: build_release

on:
  workflow_call:
    inputs: {}

jobs:
  compile-library:
    name: build_release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            extension: .a
            compiler: gcc
          - os: windows-latest
            extension: .lib
            compiler: cl
          - os: macos-latest
            extension: .a
            compiler: gcc

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up the build environment
      - name: Install Build Tools (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          # macOS already includes GCC

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install visualstudio2019buildtools --package-parameters '--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --quiet --norestart'

      # Step 3: Compile the static library
      - name: Compile Library
        run: |
          mkdir -p bin
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cl /c /I include /Fo:bin\ *.c
            lib /out:bin\libarray_op${{ matrix.extension }} bin\*.obj
          else
            gcc -Wall -I./include -c -o bin/libarray_op.o ./src/*.c
            ar rcs bin/libarray_op${{ matrix.extension }} bin/libarray_op.o
          fi

      # Step 4: Archive the library and headers
      - name: Archive Library
        run: |
          mkdir -p release
          cp bin/libarray_op${{ matrix.extension }} release/
          cp -r include release/

      # Step 5: Upload the library artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libarray_op-${{ matrix.os }}
          path: release
