name: build_release

on:
  workflow_call:
    inputs: {}

jobs:
  # Matrix build job
  compile_build:
    name: "Build Static Library"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux GCC
            os: ubuntu-latest
            compiler: gcc
            archive_ext: tar.gz
            arch: x86_64
            asset_name: linux_x86_64_gcc

          - name: Linux Clang
            os: ubuntu-latest
            compiler: clang
            archive_ext: tar.gz
            arch: x86_64
            asset_name: linux_x86_64_clang

          - name: MacOS Clang
            os: macos-latest
            compiler: gcc
            archive_ext: tar.gz
            arch: x86_64
            asset_name: macos_x86_64_gcc

          - name: MacOS Clang
            os: macos-latest
            compiler: clang
            archive_ext: tar.gz
            arch: x86_64
            asset_name: macos_x86_64_clang

          - name: MacOS Clang (M1/arm64)
            os: macos-latest
            compiler: clang
            archive_ext: tar.gz
            arch: arm64
            asset_name: macos_arm_clang
          
          - name: MacOS Clang (M1/arm64)
            os: macos-latest
            compiler: gcc
            archive_ext: tar.gz
            arch: arm64
            asset_name: macos_arm_gcc

          # - name: Windows MSVC
          #   os: windows-latest
          #   compiler: cl
          #   archive_ext: zip
          #   asset_name: win

    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Enable MSVC command prompt"
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with: 
          arch: x86_64

      - name: "Build Static Library"
        run: |
          echo running on ${{ matrix.os }} ${{ matrix.arch}}
          mkdir -p bin
          if [ "${{ matrix.compiler }}" == "cl" ]; then
            cl /I"include" /c src/*.c /Fo"bin\\" 
            lib /OUT:"bin\\libarray_op.lib" "bin\\*.obj"
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            # Linux GCC/Clang (Ubuntu)
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              # For x86_64 architecture
              ${{ matrix.compiler }} -Wall -Iinclude -c src/*.c -o bin/libarray_op.o -m64
              ar rcs bin/libarray_op.a bin/libarray_op.o
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              # For arm64 architecture
              ${{ matrix.compiler }} -Wall -Iinclude -c src/*.c -o bin/libarray_op.o -m32
              ar rcs bin/libarray_op.a bin/libarray_op.o
            fi
          else
            ${{ matrix.compiler }} -Wall -Iinclude -c src/*.c -o bin/libarray_op.o -arch ${{ matrix.arch }}
            ar rcs bin/libarray_op.a bin/libarray_op.o
          fi
        shell: bash

      - name: "Prepare Release Folder"
        run: |
          mkdir -p release/include
          cp -r include/* release/include/
          if [ "${{ matrix.compiler }}" == "cl" ]; then
            cp bin/libarray_op.lib release/
          else
            cp bin/libarray_op.a release/
          fi
        shell: bash

      - name: "Package Release Asset"
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            powershell Compress-Archive -Path release\\* -DestinationPath release\\${{ matrix.asset_name }}.${{ matrix.archive_ext }}
          else
            tar -czvf release/${{ matrix.asset_name }}.${{ matrix.archive_ext }} -C release include libarray_op.a
          fi
        shell: bash

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: release/${{ matrix.asset_name }}.${{ matrix.archive_ext }}

  create_release:
    name: "Create GitHub Release"
    runs-on: ubuntu-latest
    needs: compile_build
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Calculate Next Tag
        id: calculate_tag
        run: |
          # Get the latest tag
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")

          # Extract major, minor, and patch parts
          MAJOR=$(echo "$LAST_TAG" | cut -d '.' -f 1 | tr -d 'v')
          MINOR=$(echo "$LAST_TAG" | cut -d '.' -f 2)
          PATCH=$(echo "$LAST_TAG" | cut -d '.' -f 3)

          # Increment the minor part
          if [[ "$LAST_TAG" == "v0.0.0" ]]; then
            MINOR=1
          else
            MINOR=$((MINOR + 1))
          fi

          # Construct the new tag
          NEW_TAG="v${MAJOR}.${MINOR}.${{ github.run_number }}"

          # Output the new tag
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New tag: $NEW_TAG"

      - name: "Create Release"
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: "Release ${{ env.NEW_TAG }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload Release Assets"
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/**/*.tar.gz
          overwrite: true
